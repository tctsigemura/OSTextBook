/*
 * TacOS Source Code
 *    Tokuyama kousen Educational Computer 16bit Ver.
 *
 * Copyright (C) 2009-2018 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * util/console.cmm : TaC の画面制御部分
 *
 * 2018.01.27 : インクルードファイルの拡張子を .h から .hmm に変更
 * 2016.01.11 : ハードウェアカーソルの制御を追加
 * 2016.01.06 : コメントの体裁を清書
 * 2016.01.04 : util.h をインクルードし isPrint() を使用する(重村)
 * 2014.05.09 : 村田開発開始
 * 2012.12.26 : TaC-OS と共通化のため puthex を _puthex に名称変更
 * 2012.09.13 : TaC-CPU V2 用に変更(TAB,BS を省略しサイズを縮小)
 * 2012.02.29 : cls を public に変更
 * 2012.01.08 : 画面制御部分を ipl.cmm から分離
 * 2009.03.13 : 新規作成
 *
 * $Id$
 *
 */

#include "crt0.hmm"
#include "util.hmm"
#include "console.hmm"

#define VRAM  0xe000                           // VRAM のアドレス 

// グローバル変数 (BSS に配置)
int[] vRam;                                    // VRAM 配列
int cx,cy;                                     // VRAM 上のカーソル位置

// 画面のクリア
void cls() {
  for (int i=0; i<2000; i=i+1)
    vRam[i] = 0;
  cx = cy = 0;
}

// 改行
void newline() {
  cx = 0;
  if ((cy = cy + 1)>=25) {
    for (int i=0; i<24*80; i=i+1)
      vRam[i] = vRam[i+80];
    for (int i=24*80; i<25*80; i=i+1)
      vRam[i] = 0;
    cy=24;
  }
}

// 表示可能文字
void printable(char c) {
  vRam[cy*80+cx]=ord(c);
  if ((cx = cx + 1)>=80)
    newline();
}

// TAB
void tab() {
  int stop = (cx+8) & 0x0fff8;
  for (int i=cx; i<stop; i=i+1)
    printable(' ');
}

// バックスペース
void backspace() {
  if (cx==0 && cy==0) return;                  // これ以上戻れない
  cx = cx - 1;                                 // カーソルを左に移動
  if (cx < 0) {                                // 左端を突き抜けた
    cx = 79;                                   // 前の行の右端に移動
    cy = cy - 1;
  }
}

// VGA への1文字表示ルーチン
public void putVGA(char c) {
  int r =setPri(DI|KERN);                      // 割り込み禁止
  if (c=='\r') {                               // 復帰
     cx = 0;
  } else if (c=='\n') {                        // 改行(実は復帰もする)
     newline();
  } else if (c=='\t') {                        // TAB
     tab();
  } else if (c=='\x08') {                      // バックスペース
     backspace();
  } else if (c=='\x0c') {                      // フォームフィード
     cls();
  } else if (isPrint(c)) {                     // 表示可能な文字だけ
     printable(c);
  }
  vRam[2045] = cx;                             // ハードウェアカーソル座標
  vRam[2046] = cy;                             //   レジスタは VRAM 最後にある
  setPri(r);                                   // 割り込み復元
}

#ifdef SIO
void putSIO(char c) {                          // SIO への出力
  while ((in(0x0a) & 0x80)==0)
    ;
  out(0x08, ord(c));
}
#endif
 
// 画面の初期化
public void consInit() {
  vRam = _ItoA(VRAM);                          // VRAM のアドレス
  putVGA('\x0c');                              // 画面クリア
}
