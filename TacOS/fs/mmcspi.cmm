/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2012 - 2018 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * fs/mmcspi.cmm : MMC カード SPI モード用ドライバ
 *
 * 2018.01.27 : インクルードファイルの拡張子を .h から .hmm に変更
 * 2016.01.10 : 予期しない割込が発生するハードウェアのバグを修正したので
 *              コマンド発行時の処理を簡単化
 * 2016.01.06 : ソース、コメントの体裁を清書
 * 2015.09.02 : <crt0.h>, <dispatcher.h> のインクルードを廃止(重村)
 *              文字コードを utf-8-unix に変更
 *              著作権表示を IPL から TaC-OS に変更
 * 2014.06.11 : 割り込みをセマフォを使用した方法に変更
 * 2014.06.06 : INT_DIS (割り込み禁止)を追加, 
 *              ビジーウェイティングから割り込みに変更
 * 2014.06.03 : 村田開発開始、川部作成プログラムをコピー
 * 2014.01.21 : microSD 制御のハードウェア化に対応(川部卒研)
 * 2012.09.28 : バッファの型を char[] から void[] へ変更
 *              sendData、witeBlk、writeSct を省略
 * 2012.01.01 : 初期バージョン
 *
 * $Id$
 *
 */

/*  
 * ブロックサイズは 512Byte 固定
 * プロセスはハードウェアに指示を出してセマフォに P 操作をしてブロック
 * 割り込み処理ルーチンはセマフォに V 操作をしてプロセスを起こす
 */

#include "mmcspi.hmm"
#include <util.hmm>
#include <kernel.hmm>

#define SD_STAT         0x10
#define SD_CTRL         0x10
#define MEM_ADDR        0x12
#define BLK_ADDR_H      0x14
#define BLK_ADDR_L      0x16

#define IDLE            0x0080
#define ERROR           0x0040

#define INT_DIS         0x0000
#define INT_ENA         0x0080
#define INIT            0x0004
#define READ            0x0002
#define WRITE           0x0001

//----------------------------------------------------------------------------
//  public function
//----------------------------------------------------------------------------
int sem;                                // 生成したセマフォ番号が入る

interrupt restart() {                   // 割込が発生したら
       semV(sem);                       // 待っていたプロセスを起こす
}

// initMccSpi : microSD カードの初期化
public void initMmcSpi() {
       int[] Vector = _ItoA(0xffe0);    // 割り込みベクタ登録
       Vector[8]=addrof(restart);
       sem=newSem(0);                   // セマフォを生成
       out(SD_CTRL, INIT | INT_ENA);    // microSD カードの初期化、割り込み許可
       semP(sem);                       // ブロック
}

// readSct  : ブロックを読み込む
// 引数 h   : 読み込むブロックの上位ブロックアドレス
//      l   : 読み込むブロックの下位ブロックアドレス
//      buf : データを読み込むバッファ
public void readSct(int h, int l, void[] buf) {
       out(MEM_ADDR, _AtoI(buf));       // buf のアドレスを MEM_ADDR に格納
       out(BLK_ADDR_H, h);              // BLK_ADDR にブロックアドレスを格納
       out(BLK_ADDR_L, l);
       out(SD_CTRL, READ | INT_ENA);    // 読み込み開始指示、割り込み許可
       semP(sem);                       // ブロック
}

// writeSct : ブロックを書き込む
// 引数 h   : 書き込むブロックの上位ブロックアドレス
//      l   : 書き込むブロックの下位ブロックアドレス
//      buf : 書き込む内容が格納されているバッファ
public void writeSct(int h, int l, void[] buf) {
       out(MEM_ADDR, _AtoI(buf));
       out(BLK_ADDR_H, h);
       out(BLK_ADDR_L, l);
       out(SD_CTRL, WRITE | INT_ENA);   // 書き込み開始指示、割り込み許可
       semP(sem);                       // ブロック
}
