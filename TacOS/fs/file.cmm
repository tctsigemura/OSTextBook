/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2011 - 2018 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * fs/file.cmm : オープンファイルを管理するクラス
 *
 * 2018.01.27 : インクルードファイルの拡張子を .h から .hmm に変更
 * 2016.01.06 : コードレビューを反映
 * 2015.12.01 : 新規作成
 *
 * $Id$
 *
 */

#include <util.hmm>
#include <mm.hmm>
#include "fsDef.hmm"                            // 全体に共通の定義
#include "file.hmm"
#include "blkFile.hmm"

// 32bit の定数
int[] ONE32    = {0, 1};                        // 32bit の 1
int[] BLKSIZ32 = {0, BLKSIZ};                   // 32bit の BLKSIZ

// nextPos(), isEof() 用の一時領域
int[] pos32 = {0, 0};
int[] len32 = {0, 0};  

// ファイルの現在位置を 1Byte 進める
void nextPos(File f) {
  ld32(pos32, f.posH, f.posL);                  // 現在位置を 32bit データにする
  _add32(pos32, ONE32);                         // 現在位置に 1 を加算
  st32(f.posH, f.posL, pos32);                  // 計算結果を現在位置にする
  f.isEob = f.posL%BLKSIZ==0;                   // セクタ境界をまたぐ
}

// ファイルの現在位置が EOF になっている
boolean isEof(File f) {
  ld32(pos32, f.posH, f.posL);                  // 現在位置を 32bit データにする
  ld32(len32, f.lenH, f.lenL);                  // ファイル長を 32bit にする
  return _uCmp32(pos32, len32)>=0;              // 現在位置はファイルの最後か
}

// fillBuf : (f.posH, f.posL)位置のセクタをキャッシュに読み込む
// 返り値  : true:正常  fase:EOF
// 引数 f  : 該当ファイルの FILE オブジェクト
int[] fb32  = {0, 0};
Blk   fbBlk = {0, 0};
boolean fillBuf(File f) {
  if (f.posClst==UNASSIGN) {                    // キャッシュの現在位置が無効
    ld32(fb32, f.posH, f.posL);                 //   ファイルの現在バイト位置
    ldBlk(fbBlk, f.clst, 0);                    //   ファイルの先頭セクタ
    while (_uCmp32(fb32, BLKSIZ32)>=0) {        //   ファイル先頭から
      if (!nextBlk(fbBlk)) {                    //     目的セクタまでたぐる
        if (_uCmp32(fb32, BLKSIZ32)==0)         //       たぐれなくなった時
          return false;                         //         クラスタ境界ならEOF
        panic("fillBuf");                       //       それ以外はバグか
      }                                         //         壊れたメディア
      _sub32(fb32, BLKSIZ32);                   //     バイト位置を BLKSIZ 前進
    }
  } else if (f.isEob) {                         // キャッシュを次セクタに進める
    flushBuf(f);                                //   キャッシュをフラッシュする
    ldBlk(fbBlk, f.posClst, f.posSct);          //   現在キャッシュ中のセクタ
    if (!nextBlk(fbBlk)) return false;          //   次のセクタに進む
    f.isEob = false;                            //   フラグを下ろす
  } else {
    return true;                                // 現在のキャッシュのままでよい
  }

  if (f.isDir || !isEof(f))                     // DIRかファイルの途中位置なら
    readBlk(fbBlk, f.fileBuf);                  //   キャッシュに読む
  stBlk(f.posClst, f.posSct, fbBlk);            // キャッシュしたセクタを記録
  return true;
}

// flushBuf : キャッシュの内容をデバイスに書き込む
// 引数 f   : キャッシュをフラッシュする File オブジェクト
Blk flushBlk = {0, 0};
public void flushBuf(File f) {
  if(f.fileIsDirty) {                           // フラグが立っていたら
    ldBlk(flushBlk, f.posClst, f.posSct);       //   現在のキャッシュ位置
    writeBlk(flushBlk, f.fileBuf);              //   デバイスに書く
    f.fileIsDirty = false;                      //   フラグを下ろす
  }
}

// getByteFile : ファイルから Byte 単位でデータを読み込む
// 返り値      : 0>:ファイルから読み出した値　-1:EOF
// 引数 f      : データを読み込む File オブジェクト
public int getByteFile(File f) {
  if (!f.isDir && isEof(f)) return -1;          // EOF
  if (!fillBuf(f)) return -1;                   // 目的のセクタを読む
                                                // DIR ファイルはここで EOF 判定
  int r = ord(f.fileBuf[f.posL%BLKSIZ]);        // データを 1Byte 取り出す
  nextPos(f);                                   // 現在位置を 1Byte 進める
  return r;                                     // バイトを 16bit で返す
}

// putByteFile : ファイルに Byte 単位で書き込む
// 返り値      : 1:正常(ファイル長拡長)　0:正常(非拡長)  -1:領域不足
// 引数 f      : 書き込み対象の File オブジェクト
//      ch     : 書き込むデータ
public int putByteFile(File f, char ch) {
  if (f.clst==UNASSIGN) {                       // 新規ファイルなら
    if ((f.clst=allocClst(UNASSIGN))==UNASSIGN) //   クラスタを割当てる
      return -1;                                //     空きクラスタがない
    f.posClst = f.clst;                         //   キャッシュ管理情報を初期化
    f.posSct  = 0;                              //   キャッシュ管理情報を初期化
  } else if (!fillBuf(f)) {                     // 目的のセクタを読む
    f.posClst = allocClst(f.posClst);           //   EOF ならクラスタ拡張
    if (f.posClst==UNASSIGN) return -1;         //     空きクラスタがない
    f.posSct  = 0;                              //   セクタ番号をリセット
  }

  // キャッシュに書き込む
  f.fileBuf[f.posL%BLKSIZ]=ch;                  // データを書き込む
  f.fileIsDirty = true;                         // ダーティーフラグを立てる

  boolean eof = isEof(f);                       // 既に EOF に達していたか調べて
  nextPos(f);                                   //   次のバイトに進む

  if (eof) {                                    // ファイルが伸びたなら
    f.lenH = f.posH;                            //   FILE オブジェクトの
    f.lenL = f.posL;                            //     ファイルサイズを更新
    return 1;                                   //   ファイルが拡張された
  }

  return 0;
}

// seekFile  : ファイルの読み書き位置を移動する(絶対バイト位置で指定する)
// 引数 f    : 読み書き位置を移動する File オブジェクト
//      posH : 移動する位置(上位16bit)
//      posL : 移動する位置(下位16bit)
public void seekFile(File f, int posH, int posL) {
  flushBuf(f);                                  // キャッシュをフラッシュする
  f.posH = posH;                                // 現在位置(上位16bit)
  f.posL = posL;                                // 現在位置(下位16bit)
  f.posClst = UNASSIGN;                         // キャッシュ無効の目印
}
