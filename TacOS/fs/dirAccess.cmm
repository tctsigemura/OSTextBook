/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2011 - 2018 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * fs/dirAccess.cmm : DIR エントリを管理するクラス
 *
 * 2018.01.27 : インクルードファイルの拡張子を .h から .hmm に変更
 * 2016.01.06 : コードレビューを反映
 * 2015.12.01 : 新規作成
 *
 * $Id$
 *
 */

#include <util.hmm>
#include <mm.hmm>
#include "fsDef.hmm"
#include "blkFile.hmm"
#include "dirAccess.hmm"

// entToBlk  : エントリ(先頭クラスタ番号とエントリ番号)を Blk に変換する
// 引数 clst : 先頭クラスタ番号
//      ent  : エントリ番号
//      blk  : 変換したクラスタ番号とセクタ番号が格納される
void entToBlk(DirEnt dir, Blk blk) {
  ldBlk(blk, dir.dirClst, 0);               // クラスタ先頭のセクタ
  for (int c=dir.dirEnt/(BLKSIZ/32); c>0; c=c-1) // 目的のセクタまでたぐる
    if (!nextBlk(blk)) panic("entToBlk");   //   EOF なら panic
}

//----------------------------------------------------------------------------
// キャッシュ : DIR 領域のキャッシュに関係する処理
//----------------------------------------------------------------------------
// DIR 領域は DIR FILE 中の1セクタをキャッシュする
// エントリ番号とは、クラスタ先頭からの DIR エントリの通し番号

// キャッシュに関する情報
char[] dirCache = array(BLKSIZ);            // DIR のキャッシュ領域
Blk dirCurBlk = { -1, -1 };                 // キャッシュ中のブロック
boolean dirIsDirty = false;                 // キャッシュのダーティフラグ

// flushDirEnt : キャッシュの内容を microSD カードに書き込む
public void flushDirEnt() {
  if (dirIsDirty) {                         // ダーティフラグが立っていたら
    writeBlk(dirCurBlk, dirCache);          //   キャッシュを書き込む
    dirIsDirty = false;                     //   フラグを下ろす
  }
}

// setCache    : dirEnt で指定したエントリを含むセクタをキャッシュ
// 引数 dirEnt : キャッシュしたい dirClst と dirEnt が設定された DirEnt
Blk scBlk = {0, 0};
void setCache(DirEnt dirEnt) {
  entToBlk(dirEnt, scBlk);                  // Blk に変換する
  if ((dirCurBlk.clst!=scBlk.clst) ||       // 現在キャッシュ中の
      (dirCurBlk.sct!=scBlk.sct)) {         //   セクタと違うなら
    flushDirEnt();                          // キャッシュをフラッシュ
    readBlk(scBlk, dirCache);               // キャッシュに目的セクタを読み込む
    dirCurBlk.clst = scBlk.clst;            // エントリが格納されているクラスタ#
    dirCurBlk.sct  = scBlk.sct;             // エントリが格納されているセクタ#
  }
}

//----------------------------------------------------------------------------
// DIRENT : DIR エントリ を操作する関数
//----------------------------------------------------------------------------

// readFname : キャッシュから DIR エントリの名前("abcdefghtxt"形式)を読み出す
// 引数  s   : 抜き出した名前を格納する領域
//       ofs : DIR エントリの位置
void readFname(char[] s, int ofs) {
  for (int i=0; i<11; i=i+1)                // ファイル名を抜き出す
    s[i] = dirCache[ofs+i];                 //   1文字ずつコピーする
  if (s[0]=='\x05') s[0]='\xe5';            // 本当はSJIS漢字コードの0xe5
  s[11] = '\0';                             // C-- 文字列として完成させる
}

// readDirEnt  : DIR FILE から DIR エントリの情報を DirEnt に読み込む
// 返り値      : 1:有効  0:これ以上有効なエントリはない  -1:無効なエントリ
// 引数 dirEnt : 目的 DIR エントリの dirClst と dirEnt が設定された DirEnt
public int readDirEnt(DirEnt dirEnt) {
  setCache(dirEnt);                          // 目的のセクタをキャッシュする
  int curEnt=(dirEnt.dirEnt%(BLKSIZ/32))*32; // セクタ中の着目エントリ
  char c = dirCache[curEnt];                 // 着目エントリの先頭
  if (c=='\x00') return 0;                   // これ以上有効なエントリはない
  if (c=='\xe5') return -1;                  // 無効なエントリ
  readFname(dirEnt.name, curEnt);             // ファイル名を読み込む
  dirEnt.attr = ord(dirCache[curEnt+11]);    // 属性を読み込む
  dirEnt.clst = wordLE(dirCache, curEnt+26); // 先頭クラスタ番号を読む
  dirEnt.lenH = wordLE(dirCache, curEnt+30); // ファイルサイズ（上位）を読む
  dirEnt.lenL = wordLE(dirCache, curEnt+28); // ファイルサイズ（下位）を読む
  return 1;
}

// writeFname : DIR エントリの名前("abcdefghtxt"形式)をキャッシュに書き込む
// 引数   s   : 名前が格納されている領域
//        ofs : キャッシュ上のエントリの位置
void writeFname(char[] s, int ofs) {
  for (int i=0; i<11; i=i+1)
    dirCache[ofs+i] = s[i];
  if (s[0]=='\xe5') dirCache[ofs]='\x05';    // SJIS漢字コードの0xe5は0x05に変換
}

// writeDirEnt : dirEnt の情報を DIR FILE に書き込む
// 引数 dirEnt : 書き込む情報が格納された DirEnt
public void writeDirEnt(DirEnt dirEnt) {
  setCache(dirEnt);                          // 目的のセクタをキャッシュ
  int curEnt = (dirEnt.dirEnt%(BLKSIZ/32))*32;// セクタ中の着目エントリの位置

  writeFname(dirEnt.name, curEnt);
  dirCache[curEnt+11] = chr(dirEnt.attr);    // 属性を書き込む
  stWordLE(dirCache, curEnt+26, dirEnt.clst);// 先頭クラスタ番号を書き込む
  stWordLE(dirCache, curEnt+30, dirEnt.lenH);// 上位ファイルサイズを書き込む
  stWordLE(dirCache, curEnt+28, dirEnt.lenL);// 下位ファイルサイズを書き込む
  dirIsDirty = true;                         // ダーティフラグを立てる
}

// initDirEnt : クラスタを割り当てて、初期化する
// 返り値     : !=0:クラスタの初期化成功 ==0:領域不足
// 引数 clst  : !=1:クラスタチェーン終端のクラスタ番号 ==1:初回割り当て
public int initDirEnt(int clst) {
  int newClst = allocClst(clst);             // クラスタを割り当てる
  if (newClst==UNASSIGN) return UNASSIGN;    // 割付けできなかった

  flushDirEnt();                             // キャッシュをフラッシュする
  for (int i=0; i<BLKSIZ; i=i+1)             // キャッシュ(1セクタ)を初期化
    dirCache[i] = '\x00';

  ldBlk(dirCurBlk, newClst, 0);              // 初期化するクラスタの先頭セクタ
  do {
    writeBlk(dirCurBlk, dirCache);           //   初期化する
  } while (!nextBlk(dirCurBlk));             // クラスタ中の各セクタについて
  dirCurBlk.sct = 0;                         // キャッシュに先頭セクタがある
  return newClst;                            // 割り当てたクラスタ番号を返す
}

// nextDirEnt  : DIR FILE 中の次の DIR エントリの位置を dirEnt に書き込む
// 返り値      : true=正常、false=領域不足(flag=trueの時)、EOF(flag=falseの時)
// 引数 dirEnt : エントリの探索位置が書き込まれた DirEnt
//      flag   : true:EOF の時クラスタを拡張する false:EOF でも拡張しない 
Blk nBlk = {0, 0};     // nextDirEnt() のローカル変数のつもり
public boolean nextDirEnt(DirEnt dirEnt, boolean flag) {
  int curEnt = dirEnt.dirEnt;                // 現在のエントリ
  if (curEnt%(BLKSIZ/32) == BLKSIZ/32-1) {   // セクタ終端なら
    entToBlk(dirEnt, nBlk);                  // Blk に変換する
    if (!nextBlk(nBlk)) {                    // 次のセクタがあるか確認する
      if (!flag) return false;               //   拡張を許さないなら false
      if (initDirEnt(nBlk.clst)==UNASSIGN)   //   クラスタを拡張して初期化する
        return false;                        //     領域不足
    }
  }
  dirEnt.dirEnt = curEnt + 1;                // エントリ番号を進める
  return true;
}

// newDirEnt   : 現在のエントリから始めて未使用エントリを探す。
//               なければ DIR FILE を拡張する
// 返り値      : true=正常、false=領域不足
// 引数 dirEnt : DIR FILE の DIR エントリ
public boolean newDirEnt(DirEnt dirEnt) {
  do {
    if (readDirEnt(dirEnt)!=1) return true;  // 削除か未使用のエントリなら true
  } while (nextDirEnt(dirEnt, true));        // 次のエントリを探索
  return false;                              // 領域不足
}
