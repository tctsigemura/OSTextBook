/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2011-2018 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * mm/mm.cmm : メモリマネージャー(MM)、メモリの管理を行う
 *
 * 2018.01.27 : インクルードファイルの拡張子を .h から .hmm に変更
 * 2016.01.18 : MBLOCK を MemBlk に改名
 * 2016.01.12 : MBlock、MBSize を MBLOCK、MBSIZE に変更
 * 2015.09.08 : 識別子をキャメルケースで統一(重村)
 * 2015.09.04 : mmInit() をカーネルではなく mmMain() が呼出すように変更(重村)
 * 2015.09.03 : receive() が LINK を返すので getLink() の使用を中止(重村)
 * 2015.08.20 : ファイル名を変更(mem -> mm)
 * 2015.05.08 : システムコールの種類を示す define を syscall.h に移植
 * 2015.03.25 : mm_alloc と mm_free から割り込み禁止を排除
 *            : (メモリ管理を行うのは MM のみなため)
 * 2014.08.26 : IPC が排他的なため、排他制御用のセマフォを削除
 * 2014.08.22 : 村田開発開始、サーバプロセス化、
 *              malloc と free をリンクに適した形に修正
 * 2013.03.06 : 排他制御にセマフォを使用する改良
 * 2013.01.05 : 特権モードに対応(setPri の引数)
 * 2012.09.20 : Tac-CPU V2 対応
 * 2011.05.20 : 新規作成
 *
 * $Id$
 *
 */

#include <util.hmm>
#include <kernel.hmm>
#include <syscall.hmm>
#include "mm.hmm"

#define MBSIZE sizeof(MemBlk)                   // MemBlk のバイト数
#define MAGIC  (memPool)                        // 番兵のアドレスを使用する

// 空き領域はリストにして管理される
struct MemBlk {                                 // 空き領域管理用の構造体
  MemBlk next;                                  // 次の空き領域アドレス
  int    size;                                  // 空き領域サイズ
};

//-----------------------------------------------------------------------------
// 初期化ルーチン
//-----------------------------------------------------------------------------
// メモリ管理の初期化
MemBlk memPool = {null, 0};                     // 空き領域リストの番兵
public int _end();                              // カーネルの BBS 領域の最後

void mmInit() {                                 // プログラム起動前の初期化
  memPool.next = _ItoA(addrof(_end));           // 空き領域
  memPool.next.size = 0xe000 - addrof(_end);    // 空きメモリサイズ
  memPool.next.next = null;
}

//-----------------------------------------------------------------------------
// メモリ管理本体
//-----------------------------------------------------------------------------
// メモリを割り付ける
int mmAlloc(int siz) {                          // メモリ割り当て
  int s = (siz + MBSIZE + 1) & ~1;              // 制御データ分大きい偶数に
  MemBlk p = memPool;                           // 直前の領域
  MemBlk m = p.next;                            // 対象となる領域

  while (_uCmp(m.size,s)<0) {                   // 領域が小さい間
    p = m;                                      // リストを手繰る
    m = m.next;
    if (m==null) return 0;                      // メモリが不足する場合は
  }                                             // エラーを表す null ポインタ

  if (_uCmp(m.size ,s+MBSIZE+2)<=0) {            // 分割する価値がない領域サイズ
    if (memPool.next==m && m.next==null)        // リストの長さがゼロにならない
      return 0;                                 //   ようにする
    p.next = m.next;                            // リストから外す
  } else {                                      // 領域を分割する価値がある
    MemBlk n = _addrAdd(m, s);                  // 残り領域
    n.next = m.next;
    n.size = m.size - s;
    p.next = n;
    m.size = s;
  }
  m.next = MAGIC;                               // マジックナンバー格納
  return _AtoI(_addrAdd(m, MBSIZE));            // 管理領域を除いて返す
}

void badaddr() {
   panic("badaddr");
}

// メモリを解放する
int mmFree(void[] mem) {                        // 領域解放
  MemBlk q  = _addrAdd(mem, -MBSIZE);           // 解放する領域
  MemBlk p = memPool;                           // 直前の空き領域
  MemBlk m = p.next;                            // 直後の空き領域

  if (q.next!=MAGIC)
    badaddr();                                  // 領域マジックナンバー確認

  while (_aCmp(m, q)<0) {                       // 解放する領域の位置を探る
    p = m;
    m = m.next;
    if (m==null) break;
  }

  void[] ql = _addrAdd(q, q.size);              // 解放する領域の最後
  void[] pl = _addrAdd(p, p.size);              // 直前の領域の最後

  if (_aCmp(q,pl)<0 || m!=null&&_aCmp(m,ql)<0)  // 未割り当て領域では？
    badaddr();

  if (pl==q) {                                  // 直前の領域に隣接している
    p.size = p.size + q.size;
    if (ql==m) {                                // 直後の領域とも隣接してる
      p.size = p.size + m.size;
      p.next = m.next;
    }
  } else if (ql==m) {                           // 直後の領域に隣接している
    q.size = q.size + m.size;
    q.next = m.next;
    p.next = q;
  } else {
    p.next = q;
    q.next = m;
  }
  return 0;
}

//-----------------------------------------------------------------------------
// メモリマネージャサーバの本体（メインループ他）
//-----------------------------------------------------------------------------
// システムコールの処理
int mmSysCall(int op, int prm1) {
  int rs;
  if (op==MALLOC) {
    rs = mmAlloc(prm1);                         // malloc(s)
  } else if (op==FREE) {
    rs = mmFree(_ItoA(prm1));                   // free(mem)
  } else
    panic("mmSysCall");                         // MM はカーネプロセス
  return rs;                                    //   しか使用しない
}

// メモリマネージャサーバのメインルーチン
public void mmMain() {
  mmInit();                                     // データ構造の初期化
  mmLink=newLink();                             // リンクを生成する
  while(true) {                                 // サーバのメインループ
    Link l = receive(mmLink);                   //   システムコールを受ける
    int r= mmSysCall(l.op, l.prm1);             //  システムコールを実行
    send(mmLink, r);                            //  結果を返す
  }
}

//----------------------------------------------------------------------------
// システムコールインターフェイス
//   クライアントプロセスが以下のルーチンを呼出しサーバと IPC する
//   (OS 内部でのみ使用するシステムコール)
//----------------------------------------------------------------------------

// malloc システムコール
public  void[] malloc(int s) {
  int addr = sndrec(mmLink, MALLOC, s, 0, 0);
  return _ItoA(addr);                           // 領域の先頭アドレスを返す
}

// free システムコール
public void free(void[] mem) { 
  sndrec(mmLink, FREE, _AtoI(mem), 0, 0);       // 領域の先頭アドレスを渡す
  return;
}
