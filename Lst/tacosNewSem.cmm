Sem[] semTbl=array(SEM_MAX);                        // セマフォの一覧表
boolean[] semInUse=array(SEM_MAX);                  // どれが使用中か（falseで初期化）

// セマフォの割当て
public int newSem(int init) {
  int r = setPri(DI|KERN);                          // 割り込み禁止、カーネル
  for (int i=0; i<SEM_MAX; i=i+1) {                 // 全てのセマフォについて
    if (!semInUse[i]) {                             //   未使用のものを見つけたら
      semInUse[i] = true;                           //     使用中に変更し
      semTbl[i].cnt = init;                         //     カウンタを初期化し
      setPri(r);                                    //     割込み状態を復元し
      return i;                                     //     セマフォ番号を返す
    }
  }
  panic("newSem");                                  // 未使用が見つからなかった
  return -1;                                        // ここは実行されない
}

// セマフォの解放
public void freeSem(int s) {
  semInUse[s] = false;                              // 未使用に変更（アトミック）
}
