// メモリを割り付ける
int mmAlloc(int siz) {                          // メモリ割り当て
  int s = (siz + MBSIZE + 1) & ~1;              // 制御データ分大きい偶数に
  MemBlk p = memPool;                           // 直前の領域
  MemBlk m = p.next;                            // 対象となる領域

  while (_uCmp(m.size,s)<0) {                   // 領域が小さい間
    p = m;                                      // リストを手繰る
    m = m.next;
    if (m==null) return 0;                      // メモリが不足する場合は
  }                                             // エラーを表す null ポインタ

  if (_uCmp(m.size ,s+MBSIZE+2)<=0) {            // 分割する価値がない領域サイズ
    if (memPool.next==m && m.next==null)        // リストの長さがゼロにならない
      return 0;                                 //   ようにする
    p.next = m.next;                            // リストから外す
  } else {                                      // 領域を分割する価値がある
    MemBlk n = _addrAdd(m, s);                  // 残り領域
    n.next = m.next;
    n.size = m.size - s;
    p.next = n;
    m.size = s;
  }
  m.next = MAGIC;                               // マジックナンバー格納
  return _AtoI(_addrAdd(m, MBSIZE));            // 管理領域を除いて返す
}
